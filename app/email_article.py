from flask import abort
from newspaper import Article

from app.send_email import send_message, create_message
from connect.google_api import get_gmail_service
from config import Config


_domain = Config.DOMAIN
_copyright = Config.COPYRIGHT


def _get_article(url):
    article = Article(url)
    article.download()
    article.parse()

    return {
        "title": article.title,
        "text": article.text,
        "authors": article.authors,
        "url": article.url
    }


def _send_email(
        send_to, article_title, article_text, url="", authors=None):
    service = get_gmail_service()
    sender = "me"
    user_id = sender
    to = [send_to]
    subject = "Article: {}".format(article_title).decode("utf-8")

    article_authors = ""
    if authors:
        article_authors = "By: {}\n\n".format(", ".join(authors))

    link_to_article = ""
    if url:
        link_to_article = "\n\nLink to article: {}\n".format(url)

    sign_off = (
        "\nGenerated by Article-to-email app: http://{}/\n"
        .format(_domain))

    article_text = (
        article_authors + article_text + link_to_article +
        sign_off + _copyright)

    message = create_message(sender, to, subject, article_text)
    send_message(service, user_id, message)


def create_task(form_params):
    if (
        not form_params or
        "email" not in form_params or
        "article_url" not in form_params or
        not form_params["email"] or
        not form_params["article_url"]
    ):
        abort(400)
    try:
        article = _get_article(form_params["article_url"])
        title = article["title"].encode("utf-8")
        text = article["text"].encode("utf-8")
        _send_email(
            form_params["email"], title, text,
            url=article.get("url", ""),
            authors=article.get("authors", ""))
        return "Success: Article '{}' sent to {}".format(
            title, form_params["email"])
    except IOError:
        return "Error generating message for {}".format(form_params["email"])
