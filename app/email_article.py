from os import path

from flask import abort
import requests
from newspaper import Article

from app.send_email import send_message, create_message
from connect.google_api import get_gmail_service
from config import Config


_domain = Config.DOMAIN
_copyright = Config.COPYRIGHT
_pdf_create_url = Config.PDF_CREATE_URL
_pdf_create_api_key = Config.PDF_CREATE_API_KEY


def _get_pdf_link(url):
    api_create_token = path.join(_pdf_create_url, "token/create")
    headers = {'cache-control': "no-cache"}
    response = requests.request("POST", api_create_token, headers=headers)
    token = response.text
    api_key = _pdf_create_api_key

    api_get_pdf_link = path.join(_pdf_create_url, "api/web/to/pdf")
    querystring = {"apikey": api_key, "token": token, "storefile": "true"}

    payload = "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ConversionDelay\"\r\n\r\n2\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"AdBlock\"\r\n\r\ntrue\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"Zoom\"\r\n\r\n1\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"LoadLazyContent\"\r\n\r\ntrue\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"FixedElements\"\r\n\r\nabsolute\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ViewportWidth\"\r\n\r\n800\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ViewportHeight\"\r\n\r\n800\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"PageOrientation\"\r\n\r\nportrait\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"PageRange\"\r\n\r\n1-20\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"PageSize\"\r\n\r\nletter\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"MarginTop\"\r\n\r\n10\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"MarginRight\"\r\n\r\n10\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"MarginBottom\"\r\n\r\n10\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"MarginLeft\"\r\n\r\n10\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"url\"\r\n\r\n{url}\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--".format(url=url) # noqa
    headers = {
        'content-type': (
            "multipart/form-data; boundary=----"
            "WebKitFormBoundary7MA4YWxkTrZu0gW"),
        'cache-control': "no-cache",
    }
    response = requests.request(
        "POST", api_get_pdf_link,
        data=payload, headers=headers, params=querystring)

    return response.json()["Files"][0]["Url"]


def _get_article(url):
    article = Article(url)
    article.download()
    article.parse()

    return {
        "title": article.title,
        "text": article.text,
        "authors": article.authors,
        "url": article.url
    }


def _send_email(
        send_to, article_title, article_text,
        url="", authors=None, pdf_link=None):
    service = get_gmail_service()
    sender = "me"
    user_id = sender
    to = [send_to]
    subject = "Article: {}".format(article_title)

    article_authors = ""
    if authors:
        article_authors = "By: {}\n\n".format(", ".join(authors))

    link_to_article = ""
    if url:
        link_to_article = "\n\nLink to article: {}\n".format(url)

    pdf_data = {}
    if pdf_link:
        pdf_data = {
            "response": requests.get(pdf_link),
            "title": article_title}

    sign_off = (
        "\nGenerated by Article-to-email app: {}\n"
        .format(_domain))

    article_text = (
        article_authors + article_text + link_to_article +
        sign_off + _copyright)

    message = create_message(
        sender, to, subject, article_text, pdf_data=pdf_data)
    send_message(service, user_id, message)


def create_task(form_params):
    if (
        not form_params or
        "email" not in form_params or
        "article_url" not in form_params or
        not form_params["email"] or
        not form_params["article_url"]
    ):
        abort(400)
    try:
        article = _get_article(form_params["article_url"])
        title = article["title"]
        text = article["text"]

        pdf_link = None
        if form_params.get("include_pdf", False) == "on":
            pdf_link = _get_pdf_link(form_params["article_url"])

        _send_email(
            form_params["email"], title, text,
            url=article.get("url", ""),
            authors=article.get("authors", ""),
            pdf_link=pdf_link)

        return "Success: Article '{}' sent to {}".format(
            title, form_params["email"])

    except IOError:
        return "Error generating message for {}".format(form_params["email"])
